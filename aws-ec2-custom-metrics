#!/bin/bash -e

ABS_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
if [ "$1" == "--setup" ]; then
    (crontab -l | grep -v $(basename "$0"); echo "2-59/3 * * * * $ABS_PATH") | crontab -
    exit 0
elif [ "$1" == "--setup-etccrond" ]; then
    cat > /etc/cron.d/cloudwatch-metrics <<EOF
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
1-59/2 * * * * root $ABS_PATH
EOF
    chmod 644 /etc/cron.d/cloudwatch-metrics
    exit 0
fi

INST_ID=$(curl -sS http://169.254.169.254/latest/meta-data/instance-id)
INST_TYPE=$(curl -sS http://169.254.169.254/latest/meta-data/instance-type)
AVAIL_ZONE=$(curl -sS http://169.254.169.254/latest/meta-data/placement/availability-zone)
ECS_CLUSTER=$(grep -E '^ECS_CLUSTER' /etc/ecs/ecs.config | grep -o -E '[^=]+$')
REGION=${AVAIL_ZONE::-1}

df -k -l --type=ext4 -P | grep ^/ | while read -r line; do
    VOL_UTIL_PERC=$(echo $line | cut -d' ' -f5 | tr -d '%')
    MOUNT=$(echo $line | cut -d' ' -f6)
    if grep -q -E 'docker/plugins' <<< "$MOUNT"; then
        # simplify docker managed volume plugin path for metrics
        MOUNT="docker/plugins$(grep -o -E '/[^/]+$' <<< "$MOUNT")"
    fi
    aws cloudwatch put-metric-data --region $REGION --metric-name DiskSpaceUtilization --namespace Custom/EC2 --unit Percent --value $VOL_UTIL_PERC --dimensions "InstanceId=${INST_ID},InstanceType=${INST_TYPE},AvailabilityZone=${AVAIL_ZONE}${ECS_CLUSTER:+,ClusterName=}${ECS_CLUSTER},Mount=${MOUNT}"
done

MEMINFO=$(free -m | grep Mem)
MEM_TOTAL=$(echo $MEMINFO | cut -d' ' -f2)
MEM_AVAIL=$(( 100 * $(echo $MEMINFO | cut -d' ' -f7) ))
MEM_AVAIL_PERC=$(($MEM_AVAIL / $MEM_TOTAL))
MEM_UTIL_PERC=$((100 - $MEM_AVAIL_PERC))
aws cloudwatch put-metric-data --region $REGION --metric-name MemoryUtilization --namespace Custom/EC2 --unit Percent --value $MEM_UTIL_PERC --dimensions "InstanceId=${INST_ID},InstanceType=${INST_TYPE},AvailabilityZone=${AVAIL_ZONE}${ECS_CLUSTER:+,ClusterName=}${ECS_CLUSTER}"

#####
# forward metrics collected by containers and placed in /run/ecs-custom-metrics
#####

if [ -d /run/ecs-custom-metrics ]; then
    cd /run/ecs-custom-metrics
else
    exit 0
fi
FILES="$(find . -maxdepth 1 -type f -name '*-*.json' -printf '%P\n')"
if [ -z "$FILES" ]; then
    exit 0
fi

# get single array of metric objects
jq -s '[ .[][] ]' $FILES > merged.json
xargs /bin/rm -f <<< "$FILES"

# create tsv file of metric objects
jq -r ".[] | [
    .time, .cluster, .service, .taskId, .containerId, .containerName, .percentMem, .percentCpuOfHost
] | @tsv" merged.json > metrics.tsv
rm -f merged.json

# split into groups of 20
split -l 20 -a 6 -d metrics.tsv split_
rm -f metrics.tsv

SPLITS="$(ls split_*)"
for chunk in $SPLITS; do

    jq --raw-input "split(\"\t\") | {\
        MetricName: \"MemoryUtilization\",\
        Timestamp: .[0],\
        Value: (.[6] | tonumber),\
        Unit: \"Percent\",\
        StorageResolution: 60,\
        Dimensions: [\
            {\
                Name: \"AvailabilityZone\",\
                Value: \"${AVAIL_ZONE}\"\
            },\
            {\
                Name: \"ClusterName\",\
                Value: .[1]\
            },\
            {\
                Name: \"InstanceId\",\
                Value: \"${INST_ID}\"\
            },\
            {\
                Name: \"InstanceType\",\
                Value: \"${INST_TYPE}\"\
            },\
            {\
                Name: \"ServiceName\",\
                Value: .[2]\
            },\
            {\
                Name: \"TaskId\",\
                Value: .[3]\
            },\
            {\
                Name: \"ContainerId\",\
                Value: .[4]\
            },\
            {\
                Name: \"ContainerName\",\
                Value: .[5]\
            }\
        ]\
    }" $chunk | jq -s . > cloudwatch.json
    aws cloudwatch put-metric-data --region $REGION --namespace Custom/ECS --metric-data file://cloudwatch.json

    jq --raw-input "split(\"\t\") | {\
        MetricName: \"CPUUtilizationHost\",\
        Timestamp: .[0],\
        Value: (.[7] | tonumber),\
        Unit: \"Percent\",\
        StorageResolution: 60,\
        Dimensions: [\
            {\
                Name: \"AvailabilityZone\",\
                Value: \"${AVAIL_ZONE}\"\
            },\
            {\
                Name: \"ClusterName\",\
                Value: .[1]\
            },\
            {\
                Name: \"InstanceId\",\
                Value: \"${INST_ID}\"\
            },\
            {\
                Name: \"InstanceType\",\
                Value: \"${INST_TYPE}\"\
            },\
            {\
                Name: \"ServiceName\",\
                Value: .[2]\
            },\
            {\
                Name: \"TaskId\",\
                Value: .[3]\
            },\
            {\
                Name: \"ContainerId\",\
                Value: .[4]\
            },\
            {\
                Name: \"ContainerName\",\
                Value: .[5]\
            }\
        ]\
    }" $chunk | jq -s . > cloudwatch.json
    aws cloudwatch put-metric-data --region $REGION --namespace Custom/ECS --metric-data file://cloudwatch.json
    rm -f $chunk

done
rm -f cloudwatch.json
